package notDeafult;

import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

public class Gameframe extends javax.swing.JFrame {

    /**
     * Creates new form Tframe
     */
    public Gameframe() throws FontFormatException, IOException {
        initComponents();

        helpPic.setVisible(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel()
        {
            public void paintComponent(Graphics g) {

                /*
                This Repaint Method is central to the core algorithm of the whole game
                It is user generated unlike much of this class.
                Essential the method facilitates all graphical painting instructions on the Frame
                It can also be used to refresh the Frame for instance if the user moves

                */
                logic lg = new logic();
                super.paintComponent(g); //Acquire high level paint capabilities
                try {
                    lg.readElements(); //Read
                } catch (java.io.IOException e) {

                    e.printStackTrace(); //Errors are far too ambiguous in repaint to specifically deal with.
                    //However all files are constantly regenerated therefore no IO error should ever occur
                }
                lg.assignElements(g); //Goes to each object and decides how they must be painted
                lg.populateSquares(); // Converts array to gameBoard
                lg.paintSquares(g); //Paints now converted board
                score.setText("Score = "+StartGame.score); //refreshes both score and spades
                spades.setText("Spades = "+StartGame.spades);

            }
        };
        ;
        score = new javax.swing.JLabel();
        spades = new javax.swing.JLabel();
        save = new javax.swing.JButton();
        restart = new javax.swing.JButton();
        menu = new javax.swing.JButton();
        help = new javax.swing.JToggleButton();
        helpPic = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel3.setBackground(new java.awt.Color(0, 0, 0));
        jPanel3.setMinimumSize(new java.awt.Dimension(505, 600));
        jPanel3.setName(""); // NOI18N
        jPanel3.setPreferredSize(new java.awt.Dimension(505, 600));

        score.setFont(new Font("minecraftia", Font.BOLD, 20));
        score.setForeground(new java.awt.Color(0, 255, 0));
        score.setText("SCORE = 0");

        spades.setFont(new Font("minecraftia", Font.BOLD, 20));
        spades.setForeground(new java.awt.Color(0, 255, 255));
        spades.setText("SPADES = 0");

        save.setBackground(new java.awt.Color(0, 0, 0));
        save.setFont(new Font("minecraftia", Font.BOLD, 15));
        save.setForeground(new java.awt.Color(0, 255, 0));
        save.setText("SAVE");
        save.setFocusable(false);
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        restart.setBackground(new java.awt.Color(0, 0, 0));
        restart.setFont(new Font("minecraftia", Font.BOLD, 15));
        restart.setForeground(new java.awt.Color(0, 255, 0));
        restart.setText("RESTART");
        restart.setFocusable(false);
        restart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartActionPerformed(evt);
            }
        });

        menu.setBackground(new java.awt.Color(0, 0, 0));
        menu.setFont(new Font("minecraftia", Font.BOLD, 15));
        menu.setForeground(new java.awt.Color(0, 255, 0));
        menu.setText("MAIN MENU");
        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });

        help.setBackground(new java.awt.Color(0, 0, 0));
        help.setFont(new Font("minecraftia", Font.PLAIN, 10));
        help.setForeground(new java.awt.Color(0, 255, 0));
        help.setText("HELP");
        help.setFocusable(false);
        help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpActionPerformed(evt);
            }
        });

        helpPic.setIcon(new ImageIcon("help.png"));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(restart, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(score, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 218, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spades, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(help, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(helpPic, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(29, Short.MAX_VALUE)
                .addComponent(helpPic, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(score, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spades, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(restart, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(help, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed

        SaveLoadGame svg = new SaveLoadGame();

        try {

            String file = svg.save(); //Business Logic separated from GUI
            JOptionPane.showMessageDialog(null, "Success, File Saved as " + " ' " + file + " ' "); //User is made aware of the FileName

        } catch (IOException ex) {
            Logger.getLogger(MainMenu.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("IO Error detected: Please make the author aware of the log File");

            //http://stackoverflow.com/questions/4679409/how-to-properly-handle-an-ioexception-from-close
            //"The best way to handle an IO error is to Log it."
        }

    }//GEN-LAST:event_saveActionPerformed

    private void restartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartActionPerformed
        try {
            Keyterpret kt = new Keyterpret();
            kt.lose("reset"); //Parameter used to distinguish reset from ordinary lose
            repaint(); //Blocks are repainted
            score.setText("SCORE = " + StartGame.score); //Refresh both counts
            spades.setText("SPADES = " + StartGame.spades);

        } catch (IOException ex) {
            ex.printStackTrace();
            Logger.getLogger(Gameframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FontFormatException ex) {
            Logger.getLogger(Gameframe.class.getName()).log(Level.SEVERE, null, ex);
            //The font is permanently stored in the root folder, there is virtually no danger in any FontException occurring
        } catch (SQLException ex) {
            Logger.getLogger(Gameframe.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_restartActionPerformed

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
        new MainMenu().setVisible(true);
        try {
            Keyterpret kt = new Keyterpret();
            kt.lose("reset"); //If one simply disposes the gameFrame the game does not end
            //Instead the variables must all be reset to fully stop all processes
        } catch (IOException ex) {
            Logger.getLogger(Gameframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (FontFormatException ex) {
            Logger.getLogger(Gameframe.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Gameframe.class.getName()).log(Level.SEVERE, null, ex);
        }

        dispose();

    }//GEN-LAST:event_menuActionPerformed

    private void helpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpActionPerformed

        if (help.isSelected()) {

            setSize(805, 600);
            helpPic.setVisible(true); //The Frame is made bigger and reveals the rules of the game on the click of a toggle button 
        } else {

            setSize(505, 600); //rules are hidden and frame is shrunk back to its previous size. 
            helpPic.setVisible(false);

        }

    }//GEN-LAST:event_helpActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gameframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gameframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gameframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gameframe.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Gameframe().setVisible(true);

                } catch (FontFormatException ex) {
                    ex.printStackTrace();
                    Logger.getLogger(Gameframe.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    ex.printStackTrace();
                    Logger.getLogger(Gameframe.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton help;
    private javax.swing.JLabel helpPic;
    public javax.swing.JPanel jPanel3;
    private javax.swing.JButton menu;
    private javax.swing.JButton restart;
    private javax.swing.JButton save;
    public static javax.swing.JLabel score;
    public static javax.swing.JLabel spades;
    // End of variables declaration//GEN-END:variables
}
